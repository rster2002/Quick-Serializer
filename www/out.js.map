{
  "version": 3,
  "sources": ["../src/symbols.ts", "../src/decorators/Serializable.ts", "../src/classes/ClassMeta.ts", "../src/utils/genId.ts", "../src/classes/Plugin.ts", "../src/utils/blobToBase64.ts", "../src/classes/plugins/FilePlugin.ts", "../src/classes/plugins/BlobPlugin.ts", "../src/classes/Serializer.ts", "../run.ts"],
  "sourcesContent": ["export const serializableIndicatorSymbol = Symbol();\nexport const dependenciesSymbol = Symbol();\nexport const labelSymbol = Symbol();\nexport const serializerSymbol = Symbol();\nexport const metaSymbol = Symbol();\n\nexport const deserializerSymbol = Symbol();", "import { Constructor } from \"../types\";\nimport { dependenciesSymbol, labelSymbol, serializableIndicatorSymbol, serializerSymbol } from \"../symbols\";\n\nexport default function Serializable(label: string, dependencies: Function[] = []) {\n    return function<T extends Constructor>(constructor: T) {\n        let parentDependencies = constructor[dependenciesSymbol] ?? [];\n        \n        constructor[labelSymbol] = label;\n        constructor[dependenciesSymbol] = [...dependencies, ...parentDependencies];\n        constructor[serializableIndicatorSymbol] = true;\n        \n        //@ts-ignore\n        constructor.addDependencies = function (dependencies: Function[]) {\n            constructor[dependenciesSymbol] = [\n                ...constructor[dependenciesSymbol],\n                ...dependencies,\n            ];\n        }\n    }\n}", "export default class ClassMeta {\n    private ignoredFields: string[] = [];\n\n    addIgnoredField(name: string) {\n        this.ignoredFields.push(name);\n    }\n\n    isIgnored(name: string) {\n        return this.ignoredFields.includes(name);\n    }\n}", "function randomString(characters: string, length: number): string {\n    let returnString = \"\";\n\n    for (let i = 0; i < length; i++) {\n        let r = Math.floor(Math.random() * characters.length);\n        returnString += characters[r];\n    }\n\n    return returnString;\n}\n\nexport function genId(length = 9): string {\n    return randomString(\n        \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\",\n        length\n    );\n}", "export default abstract class Plugin {\n    abstract getName(): string;\n    abstract match(value: unknown): boolean;\n    abstract serialize(value: unknown): Promise<unknown>;\n    abstract deserialize(value: unknown): Promise<unknown>;\n}", "export default async function blobToBase64(blob: Blob) {\n    let reader = new FileReader();\n    reader.readAsDataURL(blob);\n\n    return new Promise(resolve => {\n        reader.onload = () => {\n            resolve(reader.result);\n        };\n    });\n}", "import Plugin from \"../Plugin\";\nimport blobToBase64 from \"../../utils/blobToBase64\";\n\ninterface SerializedFile {\n    name: string\n    data: string\n}\n\nexport default class FilePlugin extends Plugin {\n    getName(): string {\n        return \"File\";\n    }\n\n    match(value: unknown): boolean {\n        return value instanceof File;\n    }\n\n    async serialize(value: File): Promise<unknown> {\n        return {\n            name: value.name,\n            data: await blobToBase64(value),\n        };\n    }\n    \n    async deserialize(value: SerializedFile) {\n        return new File([\"hi\"], value.name);\n    }\n}", "import Plugin from \"../Plugin\";\nimport blobToBase64 from \"../../utils/blobToBase64\";\n\nexport default class BlobPlugin extends Plugin {\n    getName(): string {\n        return \"Blob\";\n    }\n\n    match(value: unknown): boolean {\n        return value instanceof Blob;\n    }\n\n    async serialize(value: Blob): Promise<unknown> {\n        return {\n            data: await blobToBase64(value),\n        };\n    }\n\n    async deserialize(value: unknown): Promise<unknown> {\n        return Promise.resolve(undefined);\n    }\n}", "import SerializedObject from \"../interfaces/SerializedObject\";\nimport ClassMeta from \"./ClassMeta\";\nimport { dependenciesSymbol, labelSymbol, metaSymbol, serializableIndicatorSymbol } from \"../symbols\";\nimport { genId } from \"../utils/genId\";\nimport SerializationResult from \"../interfaces/SerializationResult\";\nimport Plugin from \"./Plugin\";\nimport FilePlugin from \"./plugins/FilePlugin\";\nimport BlobPlugin from \"./plugins/BlobPlugin\";\n\ninterface PluginResult {\n    resolved: boolean\n    value: unknown\n}\n\nexport default class Serializer {\n    private knownConstructors = new Set<Function>();\n    private serializedValues = new Set<unknown>();\n    private objects = new Map<object, SerializedObject>();\n    private plugins: Plugin[] = [\n        new FilePlugin(),\n        new BlobPlugin(),\n    ];\n\n    async serialize(initializer: object): Promise<SerializationResult> {\n        this.serializedValues.clear();\n        let value = await this.serializeValue(initializer);\n\n        return {\n            objects: Array.from(this.objects.values()),\n            value,\n        }\n    }\n    \n    addPlugin(plugin: Plugin) {\n        this.plugins.push(plugin);\n    }\n    \n    async serializeValue(value: any, onlyChildren = false) {\n        if (value === null || value === undefined) {\n            return value;\n        }\n\n        if (this.objects.has(value)) {\n            let entry = this.objects.get(value);\n\n            return {\n                $ref: entry.$id,\n            };\n        }\n        \n        if (value instanceof Object) {\n            let id = genId();\n            let name;\n            let serializedValue;\n            \n            this.objects.set(value, {\n                $id: id,\n                $name: \"$temp\",\n                $value: null,\n            });\n            \n            let isSerializableClass = value.constructor !== undefined && value.constructor[serializableIndicatorSymbol];\n            \n            if (isSerializableClass && !onlyChildren) {\n                name = value.constructor[labelSymbol];\n                serializedValue = await this.serializeSerializable(value);\n            } else if (Array.isArray(value)) {\n                name = \"$array\";\n                serializedValue = await this.serializeArray(value);\n            } else {\n                name = \"$object\";\n                serializedValue = await this.serializeObject(value);\n            }\n            \n            this.objects.set(value, {\n                $id: id,\n                $name: name,\n                $value: serializedValue,\n            })\n            \n            return { $ref: id };\n        }\n\n        let result = await this.resolvePlugins(value);\n\n        if (result.resolved) {\n            let id = genId();\n            this.objects.set(value, {\n                $id: id,\n                $name: \"$plugin\",\n                $value: result.value,\n            });\n            \n            return { $ref: id };\n        }\n        \n        return value;\n    }\n    \n    private async serializeSerializable(value: object) {\n        let classConstructor = Object.getPrototypeOf(Object.getPrototypeOf(value).constructor);\n        return await this.serializeObject(value);\n    }\n    \n    private async serializeArray(value: unknown[]) {\n        let items = [];\n\n        for (let arrayValue of value) {\n            items.push(await this.serializeValue(arrayValue));\n        }\n\n        return items;\n    }\n    \n    private async serializeObject(value: object) {\n        let meta = value[metaSymbol] ?? new ClassMeta();\n        let mappedValues = [];\n\n        for (let [key, objectValue] of Object.entries(value)) {\n            if (meta.isIgnored(key)) {\n                continue;\n            }\n\n            mappedValues.push([key, await this.serializeValue(objectValue)]);\n        }\n\n        return Object.fromEntries(mappedValues);\n    }\n\n    private async resolvePlugins(value: unknown): Promise<PluginResult> {\n        let matchingPlugins = this.plugins.filter(plugin => plugin.match(value));\n        let matchedPlugin = matchingPlugins[0];\n\n        if (!matchedPlugin) {\n            return {\n                resolved: false,\n                value: null,\n            }\n        }\n\n        let pluginResult = await matchedPlugin.serialize(value);\n\n        return {\n            resolved: true,\n            value: {\n                $plugin: matchedPlugin.getName(),\n                $value: pluginResult,\n            },\n        }\n    }\n    \n    async deserialize(baseConstructor: Function, serializedResult: SerializationResult) {\n        this.knownConstructors.clear();\n        this.crawlConstructor(baseConstructor);\n\n        let nameConstructorMap = new Map<string, Function>();\n        for (let constructor of Array.from(this.knownConstructors)) {\n            nameConstructorMap.set(constructor[labelSymbol], constructor);\n        }\n\n        let createdObjectsById = new Map<string, unknown>();\n        for (let serializedObject of serializedResult.objects) {\n            let name = serializedObject.$name;\n            \n            if (name === \"$object\") {\n                createdObjectsById.set(serializedObject.$id, {\n                    //@ts-ignore\n                    ...serializedObject.$value,\n                });\n                \n                continue;\n            }\n\n            if (name === \"$array\") {\n                createdObjectsById.set(serializedObject.$id, [\n                    //@ts-ignore\n                    ...serializedObject.$value,\n                ]);\n\n                continue;\n            }\n            \n            let constructor = nameConstructorMap.get(name);\n            \n            if (constructor === undefined) {\n                throw new Error(`Missing constructor for '${serializedObject.$id}' (missing constructor with name '${serializedObject.$name}')`);\n            }\n\n            let object = Object.create(constructor.prototype);\n            for (let [key, value] of Object.entries(serializedObject.$value)) {\n                object[key] = value;\n            }\n            \n            createdObjectsById.set(serializedObject.$id, object)\n        }\n\n        for (let ref of Array.from(createdObjectsById.keys())) {\n            let object = createdObjectsById.get(ref);\n\n            for (let key of Object.keys(object)) {\n                let value = object[key];\n                \n                if (this.isRef(value)) {\n                    let refId = value.$ref;\n                    object[key] = createdObjectsById.get(refId);\n                }\n            }\n        }\n        \n        return createdObjectsById.get(serializedResult.value.$ref);\n    }\n    \n    private crawlConstructor(constructor: Function) {\n        this.knownConstructors.add(constructor);\n        \n        if (constructor[dependenciesSymbol]) {\n            for (let dependencyConstructor of constructor[dependenciesSymbol]) {\n                if (!this.knownConstructors.has(dependencyConstructor)) {\n                    this.crawlConstructor(dependencyConstructor);\n                }\n            }\n        }\n    }\n    \n    private isRef(value: unknown) {\n        return typeof value === \"object\"\n            && value !== null \n            && Object.keys(value).length === 1\n            //@ts-ignore\n            && typeof value.$ref === \"string\";\n    }\n}\n", "import Serializable from \"./src/decorators/Serializable\";\nimport Serializer from \"./src/classes/Serializer\";\nlet d = {};\n\n@Serializable(\"i\")\nclass Person {\n    name: string;\n    pet: Cat;\n    obj = {\n        i: 10,\n        a: {b: 20, d},\n        d,\n    };\n    arr = []\n    \n    constructor(name: string) {\n        this.name = name;\n    }\n}\n\n@Serializable(\"Cat\", [Person])\nclass Cat {\n    owner: Person;\n    name: string;\n    \n    constructor(name: string) {\n        this.name = name;\n    }\n}\n\n//@ts-ignore\nPerson.addDependencies([Cat]);\n\nwindow.Person = Person;\n\nlet serializer = new Serializer();\n\nlet person = new Person(\"Alice\");\nlet cat = new Cat(\"Sammie\");\nperson.pet = cat;\ncat.owner = person;\n\nperson.arr.push(new Person(\"hi\"));\n\nserializer.serialize(person).then(s => {\n    serializer.deserialize(Person, s).then(d => {\n        console.log(d);\n        console.log(serializer);\n    });\n});"],
  "mappings": "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",
  "names": []
}
